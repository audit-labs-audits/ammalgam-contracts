{
  "title": "3.2: Tokens: ERC20Base Contract",
  "id": "PgGYO+u91JrVuGLznnS5KWslMpUa8sOmPThlksAHP08=",
  "originalId": 4729,
  "position": 6,
  "steps": [
    {
      "type": "textOnly",
      "description": "This tour will focus on the foundational `ERC20Base` contract, which all other tokens in the Ammalgam protocol inherit from.",
      "title": "",
      "id": "57861"
    },
    {
      "type": "revealFiles",
      "files": [
        "contracts/tokens/ERC20Base.sol"
      ],
      "description": "Here is the entire `ERC20Base.sol` file. It's an abstract contract that inherits from several OpenZeppelin contracts, most notably `ERC20`, `ERC20Plugins`, and `Ownable`. It also implements the `IAmmalgamERC20` interface.",
      "title": "",
      "id": "57862"
    },
    {
      "type": "highlight",
      "description": "The `ERC20Base` contract extends multiple contracts to provide its functionality. The `pair` state variable on line 31 serves as the **controller** - it's an immutable reference to the `AmmalgamPair` contract that acts as the **owner and validator** for this token.",
      "file": "contracts/tokens/ERC20Base.sol",
      "highlight": [
        {
          "start": 30,
          "end": 34
        }
      ],
      "title": "",
      "id": "57863"
    },
    {
      "type": "highlight",
      "description": "In the constructor, the `pair` address is passed to the `Ownable` constructor on line 45, making the `AmmalgamPair` contract the owner of this token. The `pair` is also stored as an `ITransferValidator` for later use in transfer validation. The `pluginRegistry` on line 49 manages which plugins are allowed to be added.",
      "file": "contracts/tokens/ERC20Base.sol",
      "highlight": [
        {
          "start": 39,
          "end": 50
        }
      ],
      "title": "",
      "id": "57864"
    },
    {
      "type": "highlight",
      "description": "These functions demonstrate how the controller (pair) can mint tokens and perform transfers. The `ownerMint` function has the `onlyOwner` modifier, restricting its use to the `AmmalgamPair` contract. Both functions are `virtual` with empty bodies, meaning inheriting contracts must implement their own logic. Note that `ownerBurn` is not present in this base contract.",
      "file": "contracts/tokens/ERC20Base.sol",
      "highlight": [
        {
          "start": 59,
          "end": 61
        }
      ],
      "title": "",
      "id": "57865"
    },
    {
      "type": "highlight",
      "description": "The `_update` function is the critical hook that runs before any token transfer. It overrides the parent implementations and calls `super._update` first to handle the actual token movement. This is the `_beforeTokenTransfer` hook mentioned in the instructions.",
      "file": "contracts/tokens/ERC20Base.sol",
      "highlight": [
        {
          "start": 73,
          "end": 76
        }
      ],
      "title": "",
      "id": "57866"
    },
    {
      "type": "highlight",
      "description": "After the transfer, if it's not a **mint/burn operation** and not a **penalty transfer**, the system performs validation. The logic determines which account to validate based on the token type - for **collateral tokens** (line 82-83), it validates the sender; for **debt tokens** (line 85-87), it validates the receiver.",
      "file": "contracts/tokens/ERC20Base.sol",
      "highlight": [
        {
          "start": 75,
          "end": 90
        }
      ],
      "title": "",
      "id": "57867"
    },
    {
      "type": "highlight",
      "description": "The `validateOnUpdate` call to the pair contract ensures that every token transfer maintains the solvency of the `Ammalgam protocol`. This is where the **controller** validates that the transfer doesn't leave any account undercollateralized - this is the mechanism for maintaining system solvency.",
      "file": "contracts/tokens/ERC20Base.sol",
      "highlight": [
        {
          "start": 89,
          "end": 89
        }
      ],
      "title": "",
      "id": "57868"
    },
    {
      "type": "mcq",
      "description": "In the `ERC20Base` contract, during a standard transfer of a collateral token (where `tokenType < FIRST_DEBT_TOKEN`) between two regular user accounts, what is the purpose of the `pair.validateOnUpdate(from, ...)` call on line 89?\n\nOptions:\n\n A). To have the `AmmalgamPair` contract verify that the sender's account (`from`) remains solvent after the transfer.\n\nB). To check if the recipient (`to`) has an active plugin that modifies incoming transfers.\n\nC). To allow the `AmmalgamPair` contract to veto the transfer if the recipient is on a global blacklist.\n\nD). To update the `AmmalgamPair`'s internal accounting of total collateral in the system.\n\n\nCorrect: A). To have the `AmmalgamPair` contract verify that the sender's account (`from`) remains solvent after the transfer.\n\nExplanation: The correct answer is that `validateOnUpdate` is called to ensure the sender's account remains solvent. As explained in the tour, the `pair` contract acts as the controller and is responsible for validating account health. When collateral is transferred out, the sender's account (`from`) is validated to ensure it remains sufficiently collateralized. Plugin logic is separate, and while the pair could maintain a blacklist or track totals, the specific function and parameters here are designed for per-account solvency validation, which will revert the transaction if the account becomes unhealthy.",
      "title": "",
      "id": "57870",
      "text": "In the `ERC20Base` contract, during a standard transfer of a collateral token (where `tokenType < FIRST_DEBT_TOKEN`) between two regular user accounts, what is the purpose of the `pair.validateOnUpdate(from, ...)` call on line 89?",
      "answers": [
        "To have the `AmmalgamPair` contract verify that the sender's account (`from`) remains solvent after the transfer.",
        "To check if the recipient (`to`) has an active plugin that modifies incoming transfers.",
        "To allow the `AmmalgamPair` contract to veto the transfer if the recipient is on a global blacklist.",
        "To update the `AmmalgamPair`'s internal accounting of total collateral in the system."
      ],
      "correct": 0,
      "explanation": "The correct answer is that `validateOnUpdate` is called to ensure the sender's account remains solvent. As explained in the tour, the `pair` contract acts as the controller and is responsible for validating account health. When collateral is transferred out, the sender's account (`from`) is validated to ensure it remains sufficiently collateralized. Plugin logic is separate, and while the pair could maintain a blacklist or track totals, the specific function and parameters here are designed for per-account solvency validation, which will revert the transaction if the account becomes unhealthy."
    },
    {
      "type": "highlight",
      "description": "The plugin management is handled through the `addPlugin` function. Users can add plugins to their accounts, but only if the plugin has been approved in the `pluginRegistry`. This provides a safe way to extend token functionality while maintaining security. The `setPlugin` and `plugin` functions mentioned in the instructions are inherited from the parent `ERC20Plugins` contract.",
      "file": "contracts/tokens/ERC20Base.sol",
      "highlight": [
        {
          "start": 93,
          "end": 99
        }
      ],
      "title": "",
      "id": "57869"
    }
  ]
}